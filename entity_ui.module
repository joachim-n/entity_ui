<?php

/**
 * @file
 * Provides an admin UI for building tabs on content entities.
 */

/**
 * Implements hook_entity_type_build().
 */
function entity_ui_entity_type_build(array &$entity_types) {
  foreach ($entity_types as $entity_type_id => $entity_type) {
    if ($entity_type->getGroup() != 'content') {
      // We only work with content entities.
      continue;
    }

    if (!$entity_type->getLinkTemplate('canonical')) {
      // We only work with entities that have a canonical link template.
      continue;
    }

    // Add our route provider for the tabs we add to entities.
    // @todo Core forgot to add a direct way to manipulate route_provider, so
    // we have to do it the sloppy way for now.
    $providers = $entity_type->getRouteProviderClasses() ?: [];
    if (empty($providers['entity_ui'])) {
      $providers['entity_ui'] = Drupal\entity_ui\Routing\TabRouteProvider::class;
      $entity_type->setHandlerClass('route_provider', $providers);
    }

    // Add our admin UI handler.
    // Which handler class we add depends on what sort of admin UI the entity
    // type has.
    if ($bundle_entity_type_id = $entity_type->getBundleEntityType()) {
      $bundle_entity_type = $entity_types[$bundle_entity_type_id];
      if ($bundle_collection_link_template = $bundle_entity_type->getLinkTemplate('collection')) {
        $entity_type->setHandlerClass('entity_ui_admin', \Drupal\entity_ui\EntityHandler\BundleEntityCollection::class);

        // Done with this entity type.
        continue;
      }
    }

    // TODO If we've not yet added a route for this target entity type, try to add
    // one alongside the field UI base route.
    if ($field_ui_base_route_name = $entity_type->get('field_ui_base_route')) {
      $entity_type->setHandlerClass('entity_ui_admin', \Drupal\entity_ui\EntityHandler\BasicFieldUI::class);

      // Done with this entity type.
      continue;
    }

    // Case 3: no idea!



    // TODO: filter out the entity types we don't work with!
    // joachim: 1!!!

    // Set our own handler type, 'entity_ui_admin', on each entity, checking to
    // see which of the handler classes is best.




    // the handler class is called by:
    // - some sort of routing gubbins. Probably like EntityRouteProviderSubscriber
    // - local actions derivative
    // - local task derivative


    /*
    // Set up a link template for each tab.
    // TODO: stop calling these operations!
    foreach (entity_ui_get_tabs($entity_type) as $tab_id => $entity_tab) {
      // TODO: add a prefix to template name to prevent any clashes?
      $entity_type->setLinkTemplate($tab_id, $entity_type->getLinkTemplate('canonical') . '/' . $tab_id);
    }
    */

  }
}

/**
 * Implements hook_local_tasks_alter().
 */
function entity_ui_local_tasks_alter(&$local_tasks) {
  $entity_type_manager = \Drupal::service('entity_type.manager');
  $entity_types = $entity_type_manager->getDefinitions();
  foreach ($entity_types as $entity_type_id => $entity_type_definition) {
    if ($entity_type_manager->hasHandler($entity_type_id, 'entity_ui_admin')) {
      $entity_ui_admin_handler = $entity_type_manager->getHandler($entity_type_id, 'entity_ui_admin');

      $entity_ui_admin_handler->localTasksAlter($local_tasks);
    }
  }
}

// TODO: move this to a service!
// todo: EntityTypeInterface
function entity_ui_get_tabs(\Drupal\Core\Entity\EntityTypeInterface $entity_type) {
  // DAMN IT CIRCULAR!!!!!!!!!!! FUCK

  $query = \Drupal::service('entity_type.manager')->getStorage('entity_tab')->getQuery();
  $query->condition('target_entity_type', $entity_type->id());
  $ids = $query->execute();
  $tabs = \Drupal::service('entity_type.manager')->getStorage('entity_tab')->loadMultiple($ids);
  return $tabs;
}
